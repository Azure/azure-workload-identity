parameters:
  - name: dependsOn
    type: object
  - name: matrix
    type: object

jobs:
  - job:
    timeoutInMinutes: 60
    dependsOn: ${{ parameters.dependsOn }}
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/azure-workload-identity
      GINKGO_SKIP: \[KindOnly\]
    strategy:
      matrix: ${{ parameters.matrix }}
    steps:
      - script: echo "##vso[task.setvariable variable=CLUSTER_NAME]pod-managed-identity-e2e-$(openssl rand -hex 2)"
        displayName: Set CLUSTER_NAME
      - script: make test-e2e
        displayName: Webhook E2E test suite
        env:
          SKIP_CLEANUP: "true"
      - script: |
          # xref: https://github.com/Azure/secrets-store-csi-driver-provider-azure/blob/512316adc9daa2216de10a6288f6c1df8a122654/.pipelines/templates/aks-upgrade.yaml#L3-L8
          MINOR_VERSION="$(az aks get-upgrades --resource-group ${CLUSTER_NAME} --name ${CLUSTER_NAME} --query "controlPlaneProfile.kubernetesVersion" | jq -r 'split(".") | .[:2] | join(".")')"
          echo "Minor version is - ${MINOR_VERSION}"
          UPGRADE_VERSION="$(az aks get-upgrades --resource-group ${CLUSTER_NAME} --name ${CLUSTER_NAME} --query "max(controlPlaneProfile.upgrades[?isPreview==null && !(starts_with(kubernetesVersion, '${MINOR_VERSION}'))].kubernetesVersion)" -otsv)"
          echo "Upgrading to Kubernetes ${UPGRADE_VERSION}"

          az aks upgrade --resource-group "${CLUSTER_NAME}" --name "${CLUSTER_NAME}" --kubernetes-version "${UPGRADE_VERSION}" --yes > /dev/null
        displayName: Upgrade cluster
      - script: make test-e2e
        displayName: Webhook E2E test suite
      - script: az group delete --name "${CLUSTER_NAME}" --yes --no-wait || true
        displayName: Cleanup
        condition: always()
      - template: publish-logs.yaml

trigger: none

pr: none

schedules:
  - cron: "0 0 * * *"
    always: true
    displayName: "Nightly Test"
    branches:
      include:
        - main

pool: staging-pool

jobs:
  - job: scan_images
    timeoutInMinutes: 10
    workspace:
      clean: all
    steps:
      - template: templates/publish-images.yaml
        parameters:
          publish: false
  - job: verify_deployment_yaml
    timeoutInMinutes: 20
    workspace:
      clean: all
    variables:
      # contains the following environment variables:
      # - AZURE_TENANT_ID
      # - SERVICE_ACCOUNT_ISSUER
      - group: e2e-environment-variables
    steps:
      - script: |
          openssl genrsa -out sa.key 2048
          openssl rsa -in sa.key -pubout -out sa.pub
          make kind-create
        displayName: Create a kind cluster
        env:
          SKIP_PREFLIGHT: "true"
          SERVICE_ACCOUNT_ISSUER: $(SERVICE_ACCOUNT_ISSUER)
      - script: make install-cert-manager
        displayName: Installing cert-manager
      - script: |
          sed -i "s/AZURE_TENANT_ID: .*/AZURE_TENANT_ID: ${AZURE_TENANT_ID}/" manifest_staging/deploy/aad-pi-webhook.yaml
          sed -i "s/AZURE_ENVIRONMENT: .*/AZURE_ENVIRONMENT: AzurePublicCloud/" manifest_staging/deploy/aad-pi-webhook.yaml
          KUBECTL=$(pwd)/hack/tools/bin/kubectl
          ${KUBECTL} apply -f manifest_staging/deploy/aad-pi-webhook.yaml
          ${KUBECTL} wait --for=condition=Available --timeout=5m -n aad-pi-webhook-system deployment/aad-pi-webhook-controller-manager
          ${KUBECTL} delete -f manifest_staging/deploy/aad-pi-webhook.yaml --wait --timeout=5m
        displayName: Verify deployment YAML in manifest_staging/
        env:
          AZURE_TENANT_ID: $(AZURE_TENANT_ID)
      - script: make kind-delete
        displayName: Cleanup
        condition: always()
  - job:
    timeoutInMinutes: 20
    dependsOn:
      - scan_images
      - verify_deployment_yaml
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/aad-pod-managed-identity
      SOAK_CLUSTER: "true"
      GINKGO_SKIP: \[KindOnly\]
    strategy:
      matrix:
        soak_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-dockershim"
        soak_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-containerd"
        soak_aks_linux:
          CLUSTER_NAME: "pmi-aks-linux"
        soak_arc:
          ARC_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-arc"
    steps:
      - script: make test-e2e
        displayName: Webhook E2E test suite
  - job:
    timeoutInMinutes: 60
    dependsOn:
      - scan_images
      - verify_deployment_yaml
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/aad-pod-managed-identity
      GINKGO_SKIP: \[KindOnly\]
    strategy:
      matrix:
        upgrade_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
        upgrade_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          WINDOWS_CONTAINERD: "true"
        upgrade_aks_linux:
          DUMMY_VAR: ""
        upgrade_arc:
          ARC_CLUSTER: "true"
    steps:
      - script: echo "##vso[task.setvariable variable=CLUSTER_NAME]pod-managed-identity-e2e-$(openssl rand -hex 2)"
        displayName: Set CLUSTER_NAME
      - script: make test-e2e
        displayName: Webhook E2E test suite
        env:
          SKIP_CLEANUP: "true"
      - script: |
          KUBECTL="$(pwd)/hack/tools/bin/kubectl"
          WINDOWS_NODE_NAME="$(${KUBECTL} get node --selector=kubernetes.io/os=windows -ojson | jq -r '.items[0].metadata.name')"
          ${KUBECTL} taint nodes "${WINDOWS_NODE_NAME}" kubernetes.io/os=windows:NoSchedule --overwrite
        displayName: Taint Windows nodes before upgrade
        condition: and(succeeded(), eq(variables.WINDOWS_CLUSTER, 'true'))
      - script: az aks upgrade --resource-group "${CLUSTER_NAME}" --name "${CLUSTER_NAME}" --kubernetes-version 1.21.1 --yes > /dev/null
        displayName: Upgrade cluster
      - script: make test-e2e
        displayName: Webhook E2E test suite
      - script: az group delete --name "${CLUSTER_NAME}" --yes --no-wait || true
        displayName: Cleanup
        condition: always()
  - job:
    timeoutInMinutes: 40
    dependsOn:
      - scan_images
      - verify_deployment_yaml
    workspace:
      clean: all
    variables:
      # contains the following environment variables:
      # - AZURE_TENANT_ID
      # - KEYVAULT_NAME
      # - KEYVAULT_SECRET_NAME
      # - SERVICE_ACCOUNT_ISSUER
      # - SERVICE_ACCOUNT_KEYVAULT_NAME
      # - SERVICE_PRINCIPAL_CLIENT_ID
      - group: e2e-environment-variables
      - name: LOCAL_ONLY
        value: "true"
    strategy:
      matrix:
        kind_v1_18_19:
          KIND_NODE_VERSION: v1.18.19
        kind_v1_19_11:
          KIND_NODE_VERSION: v1.19.11
        kind_v1_20_7:
          KIND_NODE_VERSION: v1.20.7
        kind_v1_21_2:
          KIND_NODE_VERSION: v1.21.2
    steps:
      - script: make test-e2e
        displayName: Webhook E2E test suite
        env:
          AZURE_TENANT_ID: $(AZURE_TENANT_ID)
          KEYVAULT_NAME: $(KEYVAULT_NAME)
          KEYVAULT_SECRET_NAME: $(KEYVAULT_SECRET_NAME)
          SERVICE_ACCOUNT_ISSUER: $(SERVICE_ACCOUNT_ISSUER)
          SERVICE_ACCOUNT_KEYVAULT_NAME: $(SERVICE_ACCOUNT_KEYVAULT_NAME)
          SERVICE_PRINCIPAL_CLIENT_ID: $(SERVICE_PRINCIPAL_CLIENT_ID)

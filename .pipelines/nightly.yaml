trigger: none

pr: none

schedules:
  - cron: "0 0 * * *"
    always: true
    displayName: "Nightly Test"
    branches:
      include:
        - main

pool: staging-pool

jobs:
  - job: scan_images
    timeoutInMinutes: 10
    workspace:
      clean: all
    steps:
      - template: templates/publish-images.yaml
        parameters:
          publish: false
  - job:
    timeoutInMinutes: 20
    dependsOn: scan_images
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/aad-pod-managed-identity
      SOAK_CLUSTER: "true"
    strategy:
      matrix:
        soak_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-dockershim"
        soak_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-containerd"
        soak_aks_linux:
          CLUSTER_NAME: "pmi-aks-linux"
        soak_arc:
          ARC_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-arc"
    steps:
      - script: make test-e2e
        displayName: Webhook E2E test suite
  - job:
    timeoutInMinutes: 60
    dependsOn: scan_images
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/aad-pod-managed-identity
    strategy:
      matrix:
        upgrade_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
        upgrade_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          WINDOWS_CONTAINERD: "true"
        upgrade_aks_linux:
          DUMMY_VAR: ""
        upgrade_arc:
          ARC_CLUSTER: "true"
    steps:
      - script: echo "##vso[task.setvariable variable=CLUSTER_NAME]pod-managed-identity-e2e-$(openssl rand -hex 2)"
        displayName: Set CLUSTER_NAME
      - script: make test-e2e
        displayName: Webhook E2E test suite
        env:
          SKIP_CLEANUP: "true"
      - script: |
          KUBECTL="$(pwd)/hack/tools/bin/kubectl"
          WINDOWS_NODE_NAME="$(${KUBECTL} get node --selector=kubernetes.io/os=windows -ojson | jq -r '.items[0].metadata.name')"
          ${KUBECTL} taint nodes "${WINDOWS_NODE_NAME}" kubernetes.io/os=windows:NoSchedule --overwrite
        displayName: Taint Windows nodes before upgrade
        condition: and(succeeded(), eq(variables.WINDOWS_CLUSTER, 'true'))
      - script: az aks upgrade --resource-group "${CLUSTER_NAME}" --name "${CLUSTER_NAME}" --kubernetes-version 1.21.1 --yes > /dev/null
        displayName: Upgrade cluster
      - script: make test-e2e
        displayName: Webhook E2E test suite
      - script: az group delete --name "${CLUSTER_NAME}" --yes --no-wait || true
        displayName: Cleanup
        condition: always()

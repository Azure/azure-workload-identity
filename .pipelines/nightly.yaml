trigger: none

pr: none

schedules:
  - cron: "0 0 * * *"
    always: true
    displayName: "Nightly Test"
    branches:
      include:
        - main

pool: staging-pool

jobs:
  - job: scan_images
    timeoutInMinutes: 30
    workspace:
      clean: all
    steps:
      - template: templates/scan-images.yaml
  - job: verify_deployment_yaml
    timeoutInMinutes: 30
    workspace:
      clean: all
    variables:
      # contains the following environment variables:
      # - AZURE_TENANT_ID
      # - SERVICE_ACCOUNT_ISSUER
      - group: e2e-environment-variables
      - name: OUTPUT_TYPE
        value: "type=docker"
    steps:
      - script: |
          openssl genrsa -out sa.key 2048
          openssl rsa -in sa.key -pubout -out sa.pub
          make kind-create
        displayName: Create a kind cluster
        env:
          SKIP_PREFLIGHT: "true"
          SERVICE_ACCOUNT_ISSUER: $(SERVICE_ACCOUNT_ISSUER)
      - script: |
          # build the same image as the one in the deployment YAML
          # then load it into the kind cluster
          make docker-build kind-load-images
        displayName: Build the webhook image
        env:
          ALL_IMAGES: webhook
          ALL_LINUX_ARCH: amd64
          OUTPUT_TYPE: type=docker
      - script: |
          # deploy the webhook, wait for it to
          # be ready, then uninstall it
          make deploy uninstall-deploy
        displayName: Verify deployment YAML in manifest_staging/
        env:
          AZURE_TENANT_ID: $(AZURE_TENANT_ID)
          DEPLOYMENT_YAML: true
      - script: make kind-delete
        displayName: Cleanup
        condition: always()
  - job:
    timeoutInMinutes: 60
    dependsOn:
      - scan_images
      - verify_deployment_yaml
    workspace:
      clean: all
    variables:
      # we can enable actual tenant id for functional e2e
      AZURE_TENANT_ID: "fake tenant id"
      REGISTRY: upstreamk8sci.azurecr.io/azure-workload-identity
      SOAK_CLUSTER: "true"
      GINKGO_SKIP: \[KindOnly\]
    strategy:
      matrix:
        soak_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-dockershim"
        soak_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-win-containerd"
        soak_aks_linux:
          CLUSTER_NAME: "pmi-aks-linux"
        soak_arc:
          ARC_CLUSTER: "true"
          CLUSTER_NAME: "pmi-aks-arc"
    steps:
      - script: make test-e2e
        displayName: Webhook E2E test suite
      - template: templates/publish-logs.yaml
  - template: templates/upgrade.yaml
    parameters:
      dependsOn:
        - scan_images
        - verify_deployment_yaml
      matrix:
        upgrade_aks_windows_dockershim:
          WINDOWS_CLUSTER: "true"
        upgrade_aks_windows_containerd:
          WINDOWS_CLUSTER: "true"
          WINDOWS_CONTAINERD: "true"
        upgrade_aks_linux:
          DUMMY_VAR: ""
        upgrade_arc:
          ARC_CLUSTER: "true"

name: Azure Workload Identity CI

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # nightly
  pull_request:
    branches:
      - main
      - release-**
    paths-ignore:
      - docs/**
      - README.md

permissions:
  id-token: write
  contents: read

jobs:
  azwi_e2e:
    environment: azwi-e2e
    env:
      SERVICE_ACCOUNT_ISSUER: ${{ secrets.SERVICE_ACCOUNT_ISSUER }}
    strategy:
      fail-fast: false
      matrix:
        # TODO(chewong): add windows and macos test env
        env: [ubuntu-20.04]
    runs-on: ${{ matrix.env }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.17"
      - name: Install Azure CLI beta
        run: |
          cd ../..
          CWD="$(pwd)"
          python3 -m venv oidc-venv
          . oidc-venv/bin/activate
          echo "activated environment"
          python3 -m pip install --upgrade pip
          echo "started installing cli beta"
          pip install -q --extra-index-url https://azcliprod.blob.core.windows.net/beta/simple/ azure-cli
          echo "installed cli beta"
          echo "$CWD/oidc-venv/bin" >> $GITHUB_PATH
      - name: Set variables
        id: variables
        run: |
          echo "AAD_APPLICATION_NAME=azwi-e2e-app-$(openssl rand -hex 2)" >> "${GITHUB_ENV}"
          SERVICE_ACCOUNT_NAMESPACE="azwi-$(openssl rand -hex 2)"
          echo "SERVICE_ACCOUNT_NAMESPACE=${SERVICE_ACCOUNT_NAMESPACE}" >> "${GITHUB_ENV}"
          echo "SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAMESPACE}-sa" >> "${GITHUB_ENV}"
      - name: Create kind cluster
        run: |
          # create a kind cluster with predefined signing keys
          echo ${{ secrets.SERVICE_ACCOUNT_SIGNING_KEY }} | base64 -d > sa.key
          echo ${{ secrets.SERVICE_ACCOUNT_KEY }} | base64 -d > sa.pub
          make kind-create
      - uses: azure/login@v1.4.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: E2E test
        run: |
          kubectl create namespace "${SERVICE_ACCOUNT_NAMESPACE}"

          make bin/azwi
          ./bin/azwi serviceaccount create \
            --aad-application-name "${AAD_APPLICATION_NAME}" \
            --service-account-namespace "${SERVICE_ACCOUNT_NAMESPACE}" \
            --service-account-name "${SERVICE_ACCOUNT_NAME}" \
            --service-account-issuer-url "${SERVICE_ACCOUNT_ISSUER}" \
            --service-account-token-expiration 10h \
            --skip-phases role-assignment

          # get the service account object
          kubectl describe serviceaccount "${SERVICE_ACCOUNT_NAME}" --namespace "${SERVICE_ACCOUNT_NAMESPACE}" > sa.yaml

          cat sa.yaml | grep "azure.workload.identity/use=true"
          APPLICATION_CLIENT_ID="$(az ad sp list --display-name "${AAD_APPLICATION_NAME}" --query '[0].appId' -otsv)"
          cat sa.yaml | grep "azure.workload.identity/client-id: ${APPLICATION_CLIENT_ID}"
          cat sa.yaml | grep "azure.workload.identity/service-account-token-expiration: 36000"
          cat sa.yaml | grep "azure.workload.identity/tenant-id: ${{ secrets.AZURE_TENANT_ID }}"

          # get the federated identity
          APPLICATION_OBJECT_ID="$(az ad app show --id "${APPLICATION_CLIENT_ID}" --query objectId -otsv)"
          az rest --method GET --uri "https://graph.microsoft.com/beta/applications/${APPLICATION_OBJECT_ID}/federatedIdentityCredentials"
      - name: Cleanup
        if: ${{ always() }}
        run: |
          set +e
          # this should delete the underlying federated identity
          ./bin/azwi serviceaccount delete phase app \
            --aad-application-name "${AAD_APPLICATION_NAME}"

          ./bin/azwi serviceaccount delete phase sa \
            --service-account-namespace "${SERVICE_ACCOUNT_NAMESPACE}" \
            --service-account-name "${SERVICE_ACCOUNT_NAME}"
